AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CFN Template for StlCardsStats Project

Globals:
  Api:
    Auth:
      DefaultAuthorizer: MyCognitoAuth
      Authorizers:
        MyCognitoAuth:
          UserPoolArn: !GetAtt StlCardsStatsCognitoUserPool.Arn

Resources:
  ###########################################################################
  # Lambda Function / Role / Policy with API Gateway hooks
  ###########################################################################
  StlCardsStatsBackendLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: ./build
      Environment:
        Variables:
          DATA_TABLE_NAME: !Ref StlCardsDataTable
      Role: !GetAtt StlCardsStatsBackendFunctionLambdaRole.Arn
      Events:
        root:
          Type: Api
          Properties:
            Path: /
            Method: get
            Auth:
              Authorizer: MyCognitoAuth
        getProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: get
            Auth:
              Authorizer: MyCognitoAuth
        postProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: post
            Auth:
              Authorizer: MyCognitoAuth
        putProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: put
            Auth:
              Authorizer: MyCognitoAuth
        deleteProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: delete
            Auth:
              Authorizer: MyCognitoAuth
        optionsProxy:
          Type: Api
          Properties:
            Path: '/{proxy+}'
            Method: options
            Auth:
              Authorizer: MyCognitoAuth
  StlCardsStatsBackendFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  StlCardsStatsBackendFunctionLambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "StlCardsStatsBackendFunctionLambdaRolePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:*"
              - "dynamodb:*"
              - "ssm:GetParameter"
            Resource: "*"
      Roles:
        - !Ref StlCardsStatsBackendFunctionLambdaRole

  ###########################################################################
  # DynamoDB Table & Read/Write Autoscaling Resources
  ###########################################################################
  StlCardsDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "PlayerName"
          AttributeType: "S"
        - AttributeName: "Date"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "PlayerName"
          KeyType: "HASH"
        - AttributeName: "Date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "StlCardsDataTable"
  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 25
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref StlCardsDataTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 25
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref StlCardsDataTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  ReadScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  #################################################################################
  # Cognito Resources
  #################################################################################
  StlCardsStatsCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        UnusedAccountValidityDays: 90
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName: StlCardsStatsCognitoUserPool
  StlCardsStatsCognitoUserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: StlCardsStatsCognitoUserPoolAppClient
      GenerateSecret: false
      UserPoolId: !Ref StlCardsStatsCognitoUserPool